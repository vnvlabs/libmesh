######################################################################
#
# Template libMesh application Makefile
LIBMESH_DIR ?= @prefix@


# include the library options determined by configure
include $(LIBMESH_DIR)/Make.common

target     := ./example-$(METHOD)

VNV_PACKAGE = EXAMPLE_$(METHOD)
libmesh_CPPFLAGS += -DVNV_APP_NAME=${VNV_PACKAGE}


###############################################################################
# File management.  This is where the source, header, and object files are
# defined

#
# source files
srcfiles 	:= $(wildcard *.C)

#
# object files
objects		:= $(patsubst %.C, %.$(obj-suffix), $(srcfiles))
###############################################################################




.PHONY: dust clean distclean

###############################################################################
# Target:
#

all:: vnv-gen
	${MAKE} $(notdir $(target))

# Production rules:  how to make the target - depends on library configuration
$(notdir $(target)): $(objects)
	@echo "Linking "$@"..."
	@$(libmesh_LIBTOOL) --tag=CXX $(LIBTOOLFLAGS) --mode=link \
	  $(libmesh_CXX) $(libmesh_CXXFLAGS) $(objects) -o $@ $(libmesh_LIBS) $(libmesh_LDFLAGS) $(EXTERNAL_FLAGS)


# Useful rules.
dust:
	@echo "Deleting old output and runtime files"
	@rm -f out*.m job_output.txt output.txt* *.gmv.* *.plt.* out*.xdr* out*.xda* PI* complete

clean: dust
	@rm -f $(objects) *.$(obj-suffix) *.lo
	@rm -f vnv.__cache__ compile_commands.json vnv_.C

clobber: clean 
	@rm -f $(target)

distclean: clean
	@rm -rf *.o .libs

echo:
	@echo srcfiles = $(srcfiles)
	@echo objects = $(objects)
	@echo target = $(target)

run: complete

complete: $(wildcard *.in)
#	@$(MAKE) dust
	@$(MAKE) -C $(dir $(target)) $(notdir $(target))
	@echo "***************************************************************"
	@echo "* Running App " $(notdir $(target))
	@echo "***************************************************************"
	@echo " "
	${LIBMESH_RUN} $(target) ${LIBMESH_OPTIONS} 2>&1 | tee output.txt
	@bzip2 -f output.txt
	@echo " "
	@echo "***************************************************************"
	@echo "* Done Running App " $(notdir $(target))
	@echo "***************************************************************"

###############################################################################
#### VNV RULES ####

vnv-dummy:
	printf "#include \"VnV.h\" \n INJECTION_REGISTRATION(VNV_APP_NAME){}" > vnv_.C

#Generate a compile commands database by cleaning, then building the example. 
compile_commands.json: vnv-dummy  
	bear ${MAKE} $(notdir $(target))

#Generate the VnV File (assumes compile commands.json exists)
vnv-gen: compile_commands.json
	${VNV_DIR}/bin/vnv-matcher --fix-omp --cache vnv.__cache__ --regFile ${LIBMESH_DIR}/vnv.__registration__ --targetFile ${PWD}/$(notdir ${target}) --package $(VNV_PACKAGE) --output vnv_.C compile_commands.json

